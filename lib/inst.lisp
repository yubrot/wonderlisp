; <inst> = (vec opcode ...)
(defun inst-opcode (i)
  (vec-ref i 0))

(def op-ldc 0)
(def op-ldv 1)
(def op-ldf 2)
(def op-ldm 3)
(def op-ldb 4)
(def op-sel 5)
(def op-app 6)
(def op-leave 7)
(def op-pop 8)
(def op-def 9)
(def op-set 10)

(defun inst-ldc (value) (vec op-ldc value))
(defun inst-ldv (name) (vec op-ldv name))
(defun inst-ldf (pattern code) (vec op-ldf pattern code))
(defun inst-ldm (pattern code) (vec op-ldm pattern code))
(defun inst-ldb (name) (vec op-ldb name))
(defun inst-sel (code-a code-b) (vec op-sel code-a code-b))
(defun inst-app (arity) (vec op-app arity))
(def inst-leave (vec op-leave))
(def inst-pop (vec op-pop))
(defun inst-def (name) (vec op-def name))
(defun inst-set (name) (vec op-set name))

(defun inst-of? (op i)
  (= op (inst-opcode i)))
